@startuml
Rebalance ->Rebalance:after rebalance we get a Map<MessageQueue,ProcessQueue>
Rebalance -> PullRequestController :  buid a pullRequest and put to pullRequestQueue
PullRequestController -> PullRequestController : while loop take the item of pullRequestQueue then pullMessage
PullRequestController->Broker:do something about flow control/message drop... if ok,async pull message from broker
Broker ->PullRequestController:call back.do the pull result
alt FOUND
PullRequestController->ConsumeMessageService:submitConsumeRequest
PullRequestController->PullRequestController:executeNextPullRequest
ConsumeMessageService->ListenerMethod:(ConsumeExecutor batch consume the message)build consumeMessageContext call ListenerMethod
ListenerMethod->ConsumeMessageService:return consume status
'alt CONSUME_SUCCESS
'ConsumeMessageService->ConsumeMessageService:
'else RECONSUME_LATER
'end
ConsumeMessageService->mqClient:send the failed message back,if still fail,put into msgBackFailed
ConsumeMessageService->ConsumeMessageService:submitConsumeRequest for msgBackFailed

ConsumeMessageService->ConsumeMessageService:remove the success message and get the ack offset,update offset
else NO_NEW_MSG
PullRequestController->PullRequestController
else NO_MATCHED_MSG
PullRequestController->PullRequestController
else OFFSET_ILLEGAL
PullRequestController->PullRequestController
end
@enduml


