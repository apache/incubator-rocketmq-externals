@startuml
Rebalance ->Rebalance:after rebalance we get a Map<MessageQueue,ProcessQueue>
Rebalance -> PullRequestService :  buid a pullRequest and put to pullRequestQueue
PullRequestService -> PullRequestService : while loop take the item of pullRequestQueue then pullMessage
PullRequestService->Broker:do something about flow control/message drop... if ok,async pull message from broker
Broker ->PullRequestService:call back.do the pull result
alt FOUND
PullRequestService->ConsumeMessageConcurrentlyService:submitConsumeRequest
PullRequestService->PullRequestService:executeNextPullRequest
ConsumeMessageConcurrentlyService->ListenerMethod:(ConsumeExecutor batch consume the message)build consumeMessageContext call ListenerMethod
ListenerMethod->ConsumeMessageConcurrentlyService:return consume status
'alt CONSUME_SUCCESS
'ConsumeMessageConcurrentlyService->ConsumeMessageConcurrentlyService:ss
'else RECONSUME_LATER
'end
ConsumeMessageConcurrentlyService->mqClient:send the failed message back,if still fail,put into msgBackFailed
ConsumeMessageConcurrentlyService->ConsumeMessageConcurrentlyService:submitConsumeRequest for msgBackFailed

ConsumeMessageConcurrentlyService->ConsumeMessageConcurrentlyService:remove the success message and get the ack offset,update offset
else NO_NEW_MSG
PullRequestService->PullRequestService
else NO_MATCHED_MSG
PullRequestService->PullRequestService
else OFFSET_ILLEGAL
PullRequestService->PullRequestService

end
@enduml


